using DataLoadLib.Global;
using DataTool.Global;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace DataTool
{
    partial class ExcelManager
    {
        private void SaveClientDataFileEnc(SheetData cSheetData, string strFilePath, bool bSetAutoGeneratedFile = true, bool needEnc = true)
        {

            if(cSheetData == null || cSheetData.listColData == null || cSheetData.listColData.Count == 0 || cSheetData.arrCellData == null)
            {
                throw new System.Exception(string.Format("{0} 시트가 존재 하지 않거나 데이타가 잘못됐습니다.", cSheetData.strName));
            }

            if(CheckTargetCount(cSheetData.listColData, ETargetType.CLIENT) == 0)
                return;

            if(string.IsNullOrEmpty(GlobalVar.EncKey))
            {
                throw new Exception("Key설정이 잘못되었습니다.");
            }

            string strFileName = string.Format("{0}/{1}{2}", strFilePath, MakeCamelString(cSheetData.strName), GlobalVar.DataExtension);
            string strBeforeFileName = string.Format("{0}/{1}{2}{3}", strFilePath, MakeCamelString(cSheetData.strName), "_befEnc", GlobalVar.DataExtension);

            if (!Directory.Exists(strFilePath))
                Directory.CreateDirectory(strFilePath);

            //if (needEnc)
            //{
            //    WriteFileEnc(cSheetData, strBeforeFileName, strFileName, cSheetData.nRowCount);
            //} 
            //else
            //{
                WriteFile(cSheetData, strFileName, cSheetData.nRowCount);
            //}
            

            if(bSetAutoGeneratedFile)
            {
                SaveCSharpStructFile(cSheetData);
                SaveCppStructFile(cSheetData);
                m_cFileMgr.GetIndexOrAddDataFile(cSheetData.strName);
                m_cFileMgr.MakeDataCppFiles();
            } 
        }

        private void WriteFile(SheetData cSheetData, string strFileName, int nRowCount)
        {
            try
            {
                using (BinaryWriter writer = new BinaryWriter(File.Open(strFileName, FileMode.Create)))
                {
                    int nMinusCol = GlobalFunctions.GetTargetExceptionCount(cSheetData.listColData, ETargetType.CLIENT);

                    writer.Write(nRowCount);
                    writer.Write(cSheetData.nColCount - nMinusCol);

                    for (int nCol = 0; nCol < cSheetData.nColCount; ++nCol)
                    {
                        if (nCol >= cSheetData.listColData.Count)
                            continue;
                        if (cSheetData.listColData[nCol].eTargetType == ETargetType.SERVER)
                            continue;

                        var eDataType = cSheetData.listColData[nCol].eDataType;
                        var eTargetType = cSheetData.listColData[nCol].eTargetType;

                        writer.Write(eDataType == EDataType.ENUM ? (int)EDataType.INT : (int)eDataType);

                        for (int nRow = 0; nRow < cSheetData.nRowCount; ++nRow)
                        {
                            if (cSheetData.arrCellData[nRow, nCol] == null)
                            {
                                throw new System.Exception(string.Format("{0} 시트 UID : {1} 컬럼 {2} 행 데이터가 없습니다.",
                                        cSheetData.strName, cSheetData.listColData[nCol].strExcelColName, nRow));
                            }

                            if (string.IsNullOrWhiteSpace(cSheetData.listColData[nCol].strExcelColName))
                                continue;

                            switch (eDataType)
                            {
                                case EDataType.INT:
                                case EDataType.ENUM:
                                    int nValue = cSheetData.arrCellData[nRow, nCol].GetIntValue();
                                    writer.Write(nValue);
                                    break;
                                case EDataType.FLOAT:
                                    float fValue = cSheetData.arrCellData[nRow, nCol].GetFloatValue();
                                    writer.Write(fValue);
                                    break;
                                case EDataType.STRING:
                                    int size = cSheetData.arrCellData[nRow, nCol].GetStrValue().Length * sizeof(char);
                                    writer.Write(size);
                                    byte[] bytes = new byte[size];
                                    string strValue = cSheetData.arrCellData[nRow, nCol].GetStrValue();
                                    System.Buffer.BlockCopy(strValue.ToCharArray(), 0, bytes, 0, bytes.Length);

                                    writer.Write(bytes, 0, bytes.Length);
                                    break;
                                case EDataType.BOOL:
                                    bool bValue = cSheetData.arrCellData[nRow, nCol].GetBoolValue();
                                    writer.Write(bValue ? 1 : 0);
                                    break;

                                default:
                                    throw new System.Exception(string.Format("{0} 시트 UID : {1} {2} 컬럼 데이터 타입이 잘못 되었습니다.", cSheetData.strName, cSheetData.arrCellData[nRow, 0].GetIntValue(), cSheetData.listColData[nCol].strExcelColName));
                            }
                        }
                    }

                    writer.Close();
                }
            }
            catch (Exception e)
            {
                m_cEvtHandler?.ShowMessageBox?.Invoke(e.Message);
            }
        }

        private void WriteFileEnc(SheetData cSheetData, string strBeforeFileName, string strFileName, int nRowCount)
        {
            try
            {
                WriteFile(cSheetData, strBeforeFileName, nRowCount);

                using (FileStream fs = new FileStream(strBeforeFileName, FileMode.Open))
                {
                    using (FileStream enFs = new FileStream(strFileName, FileMode.Create))
                    {
                        AesCryptoServiceProvider rc = new AesCryptoServiceProvider();
                        rc.KeySize = GlobalVar.KeySize * 8;
                        rc.Key = ASCIIEncoding.ASCII.GetBytes(GlobalVar.EncKey);
                        rc.IV = GlobalVariable.SECURE_KEY;
                        //rc.IV = new byte[16];

                        using (CryptoStream cs = new CryptoStream(enFs, rc.CreateEncryptor(), CryptoStreamMode.Write))
                        {
                            byte[] arrInput = new byte[fs.Length];
                            fs.Read(arrInput, 0, arrInput.Length);
                            cs.Write(arrInput, 0, arrInput.Length);

                            cs.Close();
                            enFs.Close();
                            fs.Close();

                            File.Delete(strBeforeFileName);
                        }
                    }
                }
                
            }
            catch (Exception e)
            {
                m_cEvtHandler?.ShowMessageBox?.Invoke(e.Message);
            }
        }

        private void SaveClientGroupFilesEnc(SheetData cSheetData, string strFilePath)
        {
            try
            {
                if (cSheetData == null || cSheetData.listColData == null || cSheetData.listColData.Count == 0 || cSheetData.arrCellData == null)
                {
                    throw new System.Exception(string.Format("{0} 시트가 존재 하지 않거나 데이타가 잘못됐습니다.", cSheetData.strName));
                }

                if (CheckTargetCount(cSheetData.listColData, ETargetType.CLIENT) == 0)
                    return;

                int nGroupCol = GetGroupColIndex(cSheetData.listColData);
                List<int> listGroupValue = new List<int>();
                List<int> listGroupCount = new List<int>();

                GetGroupValueAndCount(cSheetData.arrCellData, nGroupCol, cSheetData.nRowCount, ref listGroupValue, ref listGroupCount);

                if (!Directory.Exists(strFilePath))
                    Directory.CreateDirectory(strFilePath);

                for (int i = 0; i < listGroupValue.Count; ++i)
                {
                    if (i >= listGroupCount.Count)
                        continue;

                    string strFileName = string.Format("{0}/{1}_{2}{3}", strFilePath, MakeCamelString(cSheetData.strName), listGroupValue[i], GlobalVar.DataExtension);
                    string strBeforeFileName = string.Format("{0}/{1}_{2}{3}{4}", strFilePath, MakeCamelString(cSheetData.strName), listGroupValue[i], "_befEnc", GlobalVar.DataExtension);

                    SaveClientGroupFileEnc(cSheetData, strFileName, strBeforeFileName, listGroupValue[i], nGroupCol, listGroupCount[i]);
                }

                SaveCSharpStructFile(cSheetData);
                SaveCppStructFile(cSheetData);
            }
            catch (Exception e)
            {
                throw new System.Exception(string.Format("SaveClientGroupFilesEnc - sheet : {0} , {1}", cSheetData.strName, e.Message));
            }
        }

        private void SaveClientGroupFileEnc(SheetData cSheetData, string strFileName, string strBeforeFileName, int nGroupValue, int nGroupCol, int nGroupCount)
        {
            try
            {
                using (BinaryWriter writer = new BinaryWriter(File.Open(strBeforeFileName, FileMode.Create)))
                {
                    int nMinusCol = GlobalFunctions.GetTargetExceptionCount(cSheetData.listColData, ETargetType.CLIENT);

                    writer.Write(nGroupCount);
                    writer.Write(cSheetData.nColCount - nMinusCol);

                    for (int nCol = 0; nCol < cSheetData.nColCount; ++nCol)
                    {
                        if (nCol >= cSheetData.listColData.Count)
                            continue;
                        if (cSheetData.listColData[nCol].eTargetType == ETargetType.SERVER)
                            continue;

                        var eDataType = cSheetData.listColData[nCol].eDataType;
                        var eTargetType = cSheetData.listColData[nCol].eTargetType;

                        writer.Write(eDataType == EDataType.ENUM ? (int)EDataType.INT : (int)eDataType);

                        for (int nRow = 0; nRow < cSheetData.nRowCount; ++nRow)
                        {
                            if (cSheetData.arrCellData[nRow, nCol] == null)
                            {
                                throw new System.Exception(string.Format("{0} 시트 UID : {1} 컬럼 {2} 행 데이터가 없습니다.",
                                        cSheetData.strName, cSheetData.listColData[nCol].strExcelColName, nRow));
                            }

                            int nCurGroupID = cSheetData.arrCellData[nRow, nGroupCol].GetIntValue();
                            if (nCurGroupID != nGroupValue)
                                continue;

                            switch (eDataType)
                            {
                                case EDataType.INT:
                                case EDataType.ENUM:
                                    int nValue = cSheetData.arrCellData[nRow, nCol].GetIntValue();
                                    writer.Write(nValue);
                                    break;
                                case EDataType.FLOAT:
                                    float fValue = cSheetData.arrCellData[nRow, nCol].GetFloatValue();
                                    writer.Write(fValue);
                                    break;
                                case EDataType.STRING:
                                    int size = cSheetData.arrCellData[nRow, nCol].GetStrValue().Length * sizeof(char);
                                    writer.Write(size);
                                    byte[] bytes = new byte[size];
                                    string strValue = cSheetData.arrCellData[nRow, nCol].GetStrValue();
                                    System.Buffer.BlockCopy(strValue.ToCharArray(), 0, bytes, 0, bytes.Length);

                                    writer.Write(bytes, 0, bytes.Length);
                                    break;

                                default:
                                    throw new System.Exception(string.Format("{0} 시트 UID : {1} {2} 컬럼 데이터 타입이 잘못 되었습니다.", cSheetData.strName, cSheetData.arrCellData[nRow, 0].GetIntValue(), cSheetData.listColData[nCol].strExcelColName));
                            }
                        }
                    }

                    writer.Close();

                    using (FileStream fs = new FileStream(strBeforeFileName, FileMode.Open))
                    {
                        using (FileStream enFs = new FileStream(strFileName, FileMode.Create))
                        {
                            AesCryptoServiceProvider rc = new AesCryptoServiceProvider();
                            rc.KeySize = GlobalVar.KeySize * 8;
                            rc.Key = ASCIIEncoding.ASCII.GetBytes(GlobalVar.EncKey);
                            rc.IV = GlobalVariable.SECURE_KEY;

                            using (CryptoStream cs = new CryptoStream(enFs, rc.CreateEncryptor(), CryptoStreamMode.Write))
                            {
                                byte[] arrInput = new byte[fs.Length];
                                fs.Read(arrInput, 0, arrInput.Length);
                                cs.Write(arrInput, 0, arrInput.Length);

                                cs.Close();
                                enFs.Close();
                                fs.Close();

                                File.Delete(strBeforeFileName);
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                throw new System.Exception(string.Format("SaveClientGroupFileEnc - sheet : {0} , {1}", cSheetData.strName, e.Message));
            }
        }
    }
}